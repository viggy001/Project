{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "K5PeEq3e0Rvl"
      },
      "outputs": [],
      "source": [
        "# Step 1: Load Dataset\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv(\"city_day.csv\")\n",
        "df.head()\n",
        "\n",
        "# Drop unused columns\n",
        "df = df.drop(columns=['Date', 'City'])\n",
        "\n",
        "# Drop rows with missing AQI\n",
        "df = df.dropna(subset=['AQI'])\n",
        "\n",
        "# Step 2: Handle Missing Values\n",
        "df = df.fillna(df.median(numeric_only=True))\n",
        "\n",
        "# Step 3: Select key pollutant features\n",
        "features = ['PM2.5', 'PM10', 'NO', 'NO2', 'NOx', 'NH3', 'CO', 'SO2', 'O3', 'Benzene', 'Toluene', 'Xylene']\n",
        "features = [f for f in features if f in df.columns]  # retain only present columns\n",
        "X = df[features]\n",
        "y = df['AQI']\n",
        "\n",
        "# Step 4: Feature Scaling\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# Step 5: Train-Test Split & Model\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n",
        "\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "print(\"MSE:\", mean_squared_error(y_test, y_pred))\n",
        "print(\"R¬≤ Score:\", r2_score(y_test, y_pred))\n",
        "\n",
        "# Step 6: Gradio Deployment\n",
        "!pip install gradio\n",
        "\n",
        "import gradio as gr\n",
        "import numpy as np\n",
        "\n",
        "def predict_aqi(*inputs):\n",
        "    input_array = np.array(inputs).reshape(1, -1)\n",
        "    input_scaled = scaler.transform(input_array)\n",
        "    prediction = model.predict(input_scaled)\n",
        "    return round(prediction[0], 2)\n",
        "\n",
        "# Create inputs for Gradio interface\n",
        "gr_inputs = [gr.Number(label=feature) for feature in features]\n",
        "\n",
        "gr.Interface(\n",
        "    fn=predict_aqi,\n",
        "    inputs=gr_inputs,\n",
        "    outputs=gr.Number(label=\"Predicted AQI\"),\n",
        "    title=\"üå´Ô∏è Air Quality Index Predictor\",\n",
        "    description=\"Enter pollutant concentrations to predict AQI.\"\n",
        ").launch()\n"
      ]
    }
  ]
}