{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "l4uMSYngY-G4",
        "outputId": "e279c841-63a0-4f27-c1c7-460afd77467b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MSE: 3533.3118360305457\n",
            "R² Score: 0.8070390610736404\n",
            "Collecting gradio\n",
            "  Downloading gradio-5.29.0-py3-none-any.whl.metadata (16 kB)\n",
            "Collecting aiofiles<25.0,>=22.0 (from gradio)\n",
            "  Downloading aiofiles-24.1.0-py3-none-any.whl.metadata (10 kB)\n",
            "Requirement already satisfied: anyio<5.0,>=3.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (4.9.0)\n",
            "Collecting fastapi<1.0,>=0.115.2 (from gradio)\n",
            "  Downloading fastapi-0.115.12-py3-none-any.whl.metadata (27 kB)\n",
            "Collecting ffmpy (from gradio)\n",
            "  Downloading ffmpy-0.5.0-py3-none-any.whl.metadata (3.0 kB)\n",
            "Collecting gradio-client==1.10.0 (from gradio)\n",
            "  Downloading gradio_client-1.10.0-py3-none-any.whl.metadata (7.1 kB)\n",
            "Collecting groovy~=0.1 (from gradio)\n",
            "  Downloading groovy-0.1.2-py3-none-any.whl.metadata (6.1 kB)\n",
            "Requirement already satisfied: httpx>=0.24.1 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.28.1)\n",
            "Requirement already satisfied: huggingface-hub>=0.28.1 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.30.2)\n",
            "Requirement already satisfied: jinja2<4.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (3.1.6)\n",
            "Requirement already satisfied: markupsafe<4.0,>=2.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (3.0.2)\n",
            "Requirement already satisfied: numpy<3.0,>=1.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (2.0.2)\n",
            "Requirement already satisfied: orjson~=3.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (3.10.18)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from gradio) (24.2)\n",
            "Requirement already satisfied: pandas<3.0,>=1.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (2.2.2)\n",
            "Requirement already satisfied: pillow<12.0,>=8.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (11.2.1)\n",
            "Requirement already satisfied: pydantic<2.12,>=2.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (2.11.4)\n",
            "Collecting pydub (from gradio)\n",
            "  Downloading pydub-0.25.1-py2.py3-none-any.whl.metadata (1.4 kB)\n",
            "Collecting python-multipart>=0.0.18 (from gradio)\n",
            "  Downloading python_multipart-0.0.20-py3-none-any.whl.metadata (1.8 kB)\n",
            "Requirement already satisfied: pyyaml<7.0,>=5.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (6.0.2)\n",
            "Collecting ruff>=0.9.3 (from gradio)\n",
            "  Downloading ruff-0.11.9-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (25 kB)\n",
            "Collecting safehttpx<0.2.0,>=0.1.6 (from gradio)\n",
            "  Downloading safehttpx-0.1.6-py3-none-any.whl.metadata (4.2 kB)\n",
            "Collecting semantic-version~=2.0 (from gradio)\n",
            "  Downloading semantic_version-2.10.0-py2.py3-none-any.whl.metadata (9.7 kB)\n",
            "Collecting starlette<1.0,>=0.40.0 (from gradio)\n",
            "  Downloading starlette-0.46.2-py3-none-any.whl.metadata (6.2 kB)\n",
            "Collecting tomlkit<0.14.0,>=0.12.0 (from gradio)\n",
            "  Downloading tomlkit-0.13.2-py3-none-any.whl.metadata (2.7 kB)\n",
            "Requirement already satisfied: typer<1.0,>=0.12 in /usr/local/lib/python3.11/dist-packages (from gradio) (0.15.3)\n",
            "Requirement already satisfied: typing-extensions~=4.0 in /usr/local/lib/python3.11/dist-packages (from gradio) (4.13.2)\n",
            "Collecting uvicorn>=0.14.0 (from gradio)\n",
            "  Downloading uvicorn-0.34.2-py3-none-any.whl.metadata (6.5 kB)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from gradio-client==1.10.0->gradio) (2025.3.2)\n",
            "Requirement already satisfied: websockets<16.0,>=10.0 in /usr/local/lib/python3.11/dist-packages (from gradio-client==1.10.0->gradio) (15.0.1)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.11/dist-packages (from anyio<5.0,>=3.0->gradio) (3.10)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.11/dist-packages (from anyio<5.0,>=3.0->gradio) (1.3.1)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx>=0.24.1->gradio) (2025.4.26)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx>=0.24.1->gradio) (1.0.9)\n",
            "Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx>=0.24.1->gradio) (0.16.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.28.1->gradio) (3.18.0)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.28.1->gradio) (2.32.3)\n",
            "Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.28.1->gradio) (4.67.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3.0,>=1.0->gradio) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3.0,>=1.0->gradio) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3.0,>=1.0->gradio) (2025.2)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<2.12,>=2.0->gradio) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic<2.12,>=2.0->gradio) (2.33.2)\n",
            "Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<2.12,>=2.0->gradio) (0.4.0)\n",
            "Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0,>=0.12->gradio) (8.1.8)\n",
            "Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0,>=0.12->gradio) (1.5.4)\n",
            "Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.11/dist-packages (from typer<1.0,>=0.12->gradio) (13.9.4)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3.0,>=1.0->gradio) (1.17.0)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (2.19.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.28.1->gradio) (3.4.1)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->huggingface-hub>=0.28.1->gradio) (2.4.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0,>=0.12->gradio) (0.1.2)\n",
            "Downloading gradio-5.29.0-py3-none-any.whl (54.1 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m54.1/54.1 MB\u001b[0m \u001b[31m18.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading gradio_client-1.10.0-py3-none-any.whl (322 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m322.9/322.9 kB\u001b[0m \u001b[31m24.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading aiofiles-24.1.0-py3-none-any.whl (15 kB)\n",
            "Downloading fastapi-0.115.12-py3-none-any.whl (95 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m95.2/95.2 kB\u001b[0m \u001b[31m8.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading groovy-0.1.2-py3-none-any.whl (14 kB)\n",
            "Downloading python_multipart-0.0.20-py3-none-any.whl (24 kB)\n",
            "Downloading ruff-0.11.9-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.5 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.5/11.5 MB\u001b[0m \u001b[31m83.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading safehttpx-0.1.6-py3-none-any.whl (8.7 kB)\n",
            "Downloading semantic_version-2.10.0-py2.py3-none-any.whl (15 kB)\n",
            "Downloading starlette-0.46.2-py3-none-any.whl (72 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m72.0/72.0 kB\u001b[0m \u001b[31m6.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading tomlkit-0.13.2-py3-none-any.whl (37 kB)\n",
            "Downloading uvicorn-0.34.2-py3-none-any.whl (62 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.5/62.5 kB\u001b[0m \u001b[31m5.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading ffmpy-0.5.0-py3-none-any.whl (6.0 kB)\n",
            "Downloading pydub-0.25.1-py2.py3-none-any.whl (32 kB)\n",
            "Installing collected packages: pydub, uvicorn, tomlkit, semantic-version, ruff, python-multipart, groovy, ffmpy, aiofiles, starlette, safehttpx, gradio-client, fastapi, gradio\n",
            "Successfully installed aiofiles-24.1.0 fastapi-0.115.12 ffmpy-0.5.0 gradio-5.29.0 gradio-client-1.10.0 groovy-0.1.2 pydub-0.25.1 python-multipart-0.0.20 ruff-0.11.9 safehttpx-0.1.6 semantic-version-2.10.0 starlette-0.46.2 tomlkit-0.13.2 uvicorn-0.34.2\n",
            "It looks like you are running Gradio on a hosted a Jupyter notebook. For the Gradio app to work, sharing must be enabled. Automatically setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n",
            "\n",
            "Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n",
            "* Running on public URL: https://3acf0c7ee728f40ba5.gradio.live\n",
            "\n",
            "This share link expires in 1 week. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<div><iframe src=\"https://3acf0c7ee728f40ba5.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": []
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "# Step 1: Load Dataset\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv(\"city_day.csv\")\n",
        "df.head()\n",
        "\n",
        "# Drop unused columns\n",
        "df = df.drop(columns=['Date', 'City'])\n",
        "\n",
        "# Drop rows with missing AQI\n",
        "df = df.dropna(subset=['AQI'])\n",
        "\n",
        "# Step 2: Handle Missing Values\n",
        "df = df.fillna(df.median(numeric_only=True))\n",
        "\n",
        "# Step 3: Select key pollutant features\n",
        "features = ['PM2.5', 'PM10', 'NO', 'NO2', 'NOx', 'NH3', 'CO', 'SO2', 'O3', 'Benzene', 'Toluene', 'Xylene']\n",
        "features = [f for f in features if f in df.columns]  # retain only present columns\n",
        "X = df[features]\n",
        "y = df['AQI']\n",
        "\n",
        "# Step 4: Feature Scaling\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# Step 5: Train-Test Split & Model\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n",
        "\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "print(\"MSE:\", mean_squared_error(y_test, y_pred))\n",
        "print(\"R² Score:\", r2_score(y_test, y_pred))\n",
        "\n",
        "# Step 6: Gradio Deployment\n",
        "!pip install gradio\n",
        "\n",
        "import gradio as gr\n",
        "import numpy as np\n",
        "\n",
        "def predict_aqi(*inputs):\n",
        "    input_array = np.array(inputs).reshape(1, -1)\n",
        "    input_scaled = scaler.transform(input_array)\n",
        "    prediction = model.predict(input_scaled)\n",
        "    return round(prediction[0], 2)\n",
        "\n",
        "# Create inputs for Gradio interface\n",
        "gr_inputs = [gr.Number(label=feature) for feature in features]\n",
        "\n",
        "gr.Interface(\n",
        "    fn=predict_aqi,\n",
        "    inputs=gr_inputs,\n",
        "    outputs=gr.Number(label=\"Predicted AQI\"),\n",
        "    title=\"🌫️ Air Quality Index Predictor\",\n",
        "    description=\"Enter pollutant concentrations to predict AQI.\"\n",
        ").launch()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv(\"city_day.csv\")\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "hNP1VPuUirES",
        "outputId": "f6edccb3-141b-43c7-90a8-2c565635c8de"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        City        Date  PM2.5  PM10     NO    NO2    NOx  NH3     CO    SO2  \\\n",
              "0  Ahmedabad  2015-01-01    NaN   NaN   0.92  18.22  17.15  NaN   0.92  27.64   \n",
              "1  Ahmedabad  2015-01-02    NaN   NaN   0.97  15.69  16.46  NaN   0.97  24.55   \n",
              "2  Ahmedabad  2015-01-03    NaN   NaN  17.40  19.30  29.70  NaN  17.40  29.07   \n",
              "3  Ahmedabad  2015-01-04    NaN   NaN   1.70  18.48  17.97  NaN   1.70  18.59   \n",
              "4  Ahmedabad  2015-01-05    NaN   NaN  22.10  21.42  37.76  NaN  22.10  39.33   \n",
              "\n",
              "       O3  Benzene  Toluene  Xylene  AQI AQI_Bucket  \n",
              "0  133.36     0.00     0.02    0.00  NaN        NaN  \n",
              "1   34.06     3.68     5.50    3.77  NaN        NaN  \n",
              "2   30.70     6.80    16.40    2.25  NaN        NaN  \n",
              "3   36.08     4.43    10.14    1.00  NaN        NaN  \n",
              "4   39.31     7.01    18.89    2.78  NaN        NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2be5ad78-cae9-4bc4-876d-f0513f79130b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>City</th>\n",
              "      <th>Date</th>\n",
              "      <th>PM2.5</th>\n",
              "      <th>PM10</th>\n",
              "      <th>NO</th>\n",
              "      <th>NO2</th>\n",
              "      <th>NOx</th>\n",
              "      <th>NH3</th>\n",
              "      <th>CO</th>\n",
              "      <th>SO2</th>\n",
              "      <th>O3</th>\n",
              "      <th>Benzene</th>\n",
              "      <th>Toluene</th>\n",
              "      <th>Xylene</th>\n",
              "      <th>AQI</th>\n",
              "      <th>AQI_Bucket</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Ahmedabad</td>\n",
              "      <td>2015-01-01</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.92</td>\n",
              "      <td>18.22</td>\n",
              "      <td>17.15</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.92</td>\n",
              "      <td>27.64</td>\n",
              "      <td>133.36</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.02</td>\n",
              "      <td>0.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Ahmedabad</td>\n",
              "      <td>2015-01-02</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.97</td>\n",
              "      <td>15.69</td>\n",
              "      <td>16.46</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.97</td>\n",
              "      <td>24.55</td>\n",
              "      <td>34.06</td>\n",
              "      <td>3.68</td>\n",
              "      <td>5.50</td>\n",
              "      <td>3.77</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Ahmedabad</td>\n",
              "      <td>2015-01-03</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>17.40</td>\n",
              "      <td>19.30</td>\n",
              "      <td>29.70</td>\n",
              "      <td>NaN</td>\n",
              "      <td>17.40</td>\n",
              "      <td>29.07</td>\n",
              "      <td>30.70</td>\n",
              "      <td>6.80</td>\n",
              "      <td>16.40</td>\n",
              "      <td>2.25</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Ahmedabad</td>\n",
              "      <td>2015-01-04</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.70</td>\n",
              "      <td>18.48</td>\n",
              "      <td>17.97</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.70</td>\n",
              "      <td>18.59</td>\n",
              "      <td>36.08</td>\n",
              "      <td>4.43</td>\n",
              "      <td>10.14</td>\n",
              "      <td>1.00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Ahmedabad</td>\n",
              "      <td>2015-01-05</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>22.10</td>\n",
              "      <td>21.42</td>\n",
              "      <td>37.76</td>\n",
              "      <td>NaN</td>\n",
              "      <td>22.10</td>\n",
              "      <td>39.33</td>\n",
              "      <td>39.31</td>\n",
              "      <td>7.01</td>\n",
              "      <td>18.89</td>\n",
              "      <td>2.78</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2be5ad78-cae9-4bc4-876d-f0513f79130b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2be5ad78-cae9-4bc4-876d-f0513f79130b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2be5ad78-cae9-4bc4-876d-f0513f79130b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-29da0c39-3ae9-4d53-8823-452b94948afd\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-29da0c39-3ae9-4d53-8823-452b94948afd')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-29da0c39-3ae9-4d53-8823-452b94948afd button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 29531,\n  \"fields\": [\n    {\n      \"column\": \"City\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 26,\n        \"samples\": [\n          \"Chennai\",\n          \"Jorapokhar\",\n          \"Ahmedabad\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 2009,\n        \"samples\": [\n          \"2019-05-13\",\n          \"2016-06-10\",\n          \"2016-01-29\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PM2.5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 64.66144945715158,\n        \"min\": 0.04,\n        \"max\": 949.99,\n        \"num_unique_values\": 11716,\n        \"samples\": [\n          346.74,\n          69.25,\n          113.31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PM10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 90.60510971779412,\n        \"min\": 0.01,\n        \"max\": 1000.0,\n        \"num_unique_values\": 12571,\n        \"samples\": [\n          165.84,\n          39.75,\n          224.71\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22.785846333999682,\n        \"min\": 0.02,\n        \"max\": 390.68,\n        \"num_unique_values\": 5776,\n        \"samples\": [\n          75.24,\n          10.42,\n          35.41\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NO2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24.474745795589385,\n        \"min\": 0.01,\n        \"max\": 362.21,\n        \"num_unique_values\": 7404,\n        \"samples\": [\n          37.53,\n          34.04,\n          45.99\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NOx\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.646010936541998,\n        \"min\": 0.0,\n        \"max\": 467.63,\n        \"num_unique_values\": 8156,\n        \"samples\": [\n          71.74,\n          14.5,\n          67.51\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NH3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25.684274996166934,\n        \"min\": 0.01,\n        \"max\": 352.89,\n        \"num_unique_values\": 5922,\n        \"samples\": [\n          21.49,\n          11.92,\n          0.29\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.96288425418876,\n        \"min\": 0.0,\n        \"max\": 175.81,\n        \"num_unique_values\": 1779,\n        \"samples\": [\n          0.53,\n          11.42,\n          4.61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SO2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18.13377484581469,\n        \"min\": 0.01,\n        \"max\": 193.86,\n        \"num_unique_values\": 4761,\n        \"samples\": [\n          16.98,\n          14.17,\n          10.71\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21.694928193444724,\n        \"min\": 0.01,\n        \"max\": 257.73,\n        \"num_unique_values\": 7699,\n        \"samples\": [\n          23.91,\n          55.17,\n          24.96\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Benzene\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.811136420606443,\n        \"min\": 0.0,\n        \"max\": 455.03,\n        \"num_unique_values\": 1873,\n        \"samples\": [\n          67.52,\n          219.48,\n          12.88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Toluene\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19.969163657373656,\n        \"min\": 0.0,\n        \"max\": 454.85,\n        \"num_unique_values\": 3608,\n        \"samples\": [\n          27.14,\n          35.5,\n          22.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Xylene\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.3232474071435165,\n        \"min\": 0.0,\n        \"max\": 170.37,\n        \"num_unique_values\": 1561,\n        \"samples\": [\n          10.78,\n          3.91,\n          25.34\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AQI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 140.69658509414836,\n        \"min\": 13.0,\n        \"max\": 2049.0,\n        \"num_unique_values\": 829,\n        \"samples\": [\n          956.0,\n          578.0,\n          898.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AQI_Bucket\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Poor\",\n          \"Very Poor\",\n          \"Good\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "RN9BlSydmQ7p",
        "outputId": "c21eae3b-2879-4480-e778-4466da2502df"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              PM2.5          PM10            NO           NO2           NOx  \\\n",
              "count  24933.000000  18391.000000  25949.000000  25946.000000  25346.000000   \n",
              "mean      67.450578    118.127103     17.574730     28.560659     32.309123   \n",
              "std       64.661449     90.605110     22.785846     24.474746     31.646011   \n",
              "min        0.040000      0.010000      0.020000      0.010000      0.000000   \n",
              "25%       28.820000     56.255000      5.630000     11.750000     12.820000   \n",
              "50%       48.570000     95.680000      9.890000     21.690000     23.520000   \n",
              "75%       80.590000    149.745000     19.950000     37.620000     40.127500   \n",
              "max      949.990000   1000.000000    390.680000    362.210000    467.630000   \n",
              "\n",
              "                NH3            CO           SO2            O3       Benzene  \\\n",
              "count  19203.000000  27472.000000  25677.000000  25509.000000  23908.000000   \n",
              "mean      23.483476      2.248598     14.531977     34.491430      3.280840   \n",
              "std       25.684275      6.962884     18.133775     21.694928     15.811136   \n",
              "min        0.010000      0.000000      0.010000      0.010000      0.000000   \n",
              "25%        8.580000      0.510000      5.670000     18.860000      0.120000   \n",
              "50%       15.850000      0.890000      9.160000     30.840000      1.070000   \n",
              "75%       30.020000      1.450000     15.220000     45.570000      3.080000   \n",
              "max      352.890000    175.810000    193.860000    257.730000    455.030000   \n",
              "\n",
              "            Toluene        Xylene           AQI  \n",
              "count  21490.000000  11422.000000  24850.000000  \n",
              "mean       8.700972      3.070128    166.463581  \n",
              "std       19.969164      6.323247    140.696585  \n",
              "min        0.000000      0.000000     13.000000  \n",
              "25%        0.600000      0.140000     81.000000  \n",
              "50%        2.970000      0.980000    118.000000  \n",
              "75%        9.150000      3.350000    208.000000  \n",
              "max      454.850000    170.370000   2049.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a1d6af21-856b-4962-8ffa-6793a1532fb6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>PM2.5</th>\n",
              "      <th>PM10</th>\n",
              "      <th>NO</th>\n",
              "      <th>NO2</th>\n",
              "      <th>NOx</th>\n",
              "      <th>NH3</th>\n",
              "      <th>CO</th>\n",
              "      <th>SO2</th>\n",
              "      <th>O3</th>\n",
              "      <th>Benzene</th>\n",
              "      <th>Toluene</th>\n",
              "      <th>Xylene</th>\n",
              "      <th>AQI</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>24933.000000</td>\n",
              "      <td>18391.000000</td>\n",
              "      <td>25949.000000</td>\n",
              "      <td>25946.000000</td>\n",
              "      <td>25346.000000</td>\n",
              "      <td>19203.000000</td>\n",
              "      <td>27472.000000</td>\n",
              "      <td>25677.000000</td>\n",
              "      <td>25509.000000</td>\n",
              "      <td>23908.000000</td>\n",
              "      <td>21490.000000</td>\n",
              "      <td>11422.000000</td>\n",
              "      <td>24850.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>67.450578</td>\n",
              "      <td>118.127103</td>\n",
              "      <td>17.574730</td>\n",
              "      <td>28.560659</td>\n",
              "      <td>32.309123</td>\n",
              "      <td>23.483476</td>\n",
              "      <td>2.248598</td>\n",
              "      <td>14.531977</td>\n",
              "      <td>34.491430</td>\n",
              "      <td>3.280840</td>\n",
              "      <td>8.700972</td>\n",
              "      <td>3.070128</td>\n",
              "      <td>166.463581</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>64.661449</td>\n",
              "      <td>90.605110</td>\n",
              "      <td>22.785846</td>\n",
              "      <td>24.474746</td>\n",
              "      <td>31.646011</td>\n",
              "      <td>25.684275</td>\n",
              "      <td>6.962884</td>\n",
              "      <td>18.133775</td>\n",
              "      <td>21.694928</td>\n",
              "      <td>15.811136</td>\n",
              "      <td>19.969164</td>\n",
              "      <td>6.323247</td>\n",
              "      <td>140.696585</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.040000</td>\n",
              "      <td>0.010000</td>\n",
              "      <td>0.020000</td>\n",
              "      <td>0.010000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.010000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.010000</td>\n",
              "      <td>0.010000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>13.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>28.820000</td>\n",
              "      <td>56.255000</td>\n",
              "      <td>5.630000</td>\n",
              "      <td>11.750000</td>\n",
              "      <td>12.820000</td>\n",
              "      <td>8.580000</td>\n",
              "      <td>0.510000</td>\n",
              "      <td>5.670000</td>\n",
              "      <td>18.860000</td>\n",
              "      <td>0.120000</td>\n",
              "      <td>0.600000</td>\n",
              "      <td>0.140000</td>\n",
              "      <td>81.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>48.570000</td>\n",
              "      <td>95.680000</td>\n",
              "      <td>9.890000</td>\n",
              "      <td>21.690000</td>\n",
              "      <td>23.520000</td>\n",
              "      <td>15.850000</td>\n",
              "      <td>0.890000</td>\n",
              "      <td>9.160000</td>\n",
              "      <td>30.840000</td>\n",
              "      <td>1.070000</td>\n",
              "      <td>2.970000</td>\n",
              "      <td>0.980000</td>\n",
              "      <td>118.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>80.590000</td>\n",
              "      <td>149.745000</td>\n",
              "      <td>19.950000</td>\n",
              "      <td>37.620000</td>\n",
              "      <td>40.127500</td>\n",
              "      <td>30.020000</td>\n",
              "      <td>1.450000</td>\n",
              "      <td>15.220000</td>\n",
              "      <td>45.570000</td>\n",
              "      <td>3.080000</td>\n",
              "      <td>9.150000</td>\n",
              "      <td>3.350000</td>\n",
              "      <td>208.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>949.990000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>390.680000</td>\n",
              "      <td>362.210000</td>\n",
              "      <td>467.630000</td>\n",
              "      <td>352.890000</td>\n",
              "      <td>175.810000</td>\n",
              "      <td>193.860000</td>\n",
              "      <td>257.730000</td>\n",
              "      <td>455.030000</td>\n",
              "      <td>454.850000</td>\n",
              "      <td>170.370000</td>\n",
              "      <td>2049.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a1d6af21-856b-4962-8ffa-6793a1532fb6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a1d6af21-856b-4962-8ffa-6793a1532fb6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a1d6af21-856b-4962-8ffa-6793a1532fb6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-5f5f65e5-cc34-4daa-aa20-764aadd41f16\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5f5f65e5-cc34-4daa-aa20-764aadd41f16')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-5f5f65e5-cc34-4daa-aa20-764aadd41f16 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"PM2.5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8758.231601413001,\n        \"min\": 0.04,\n        \"max\": 24933.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          67.45057794890306,\n          48.57,\n          24933.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PM10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6434.032965301901,\n        \"min\": 0.01,\n        \"max\": 18391.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          118.12710293078135,\n          95.68,\n          18391.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9151.752802362065,\n        \"min\": 0.02,\n        \"max\": 25949.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          17.574729662029362,\n          9.89,\n          25949.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NO2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9149.520974064313,\n        \"min\": 0.01,\n        \"max\": 25946.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          28.560659061126955,\n          21.69,\n          25946.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NOx\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8931.814412597656,\n        \"min\": 0.0,\n        \"max\": 25346.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          32.30912333307031,\n          23.52,\n          25346.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NH3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6767.254114714224,\n        \"min\": 0.01,\n        \"max\": 19203.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          23.48347601937197,\n          15.85,\n          19203.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9703.520631675414,\n        \"min\": 0.0,\n        \"max\": 27472.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.2485982090856145,\n          0.89,\n          27472.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SO2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9065.459878568538,\n        \"min\": 0.01,\n        \"max\": 25677.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          14.53197725590996,\n          9.16,\n          25677.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"O3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8998.503341437003,\n        \"min\": 0.01,\n        \"max\": 25509.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          34.49143047551845,\n          30.84,\n          25509.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Benzene\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8430.071796823879,\n        \"min\": 0.0,\n        \"max\": 23908.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.280840304500585,\n          1.07,\n          23908.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Toluene\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7574.423235817304,\n        \"min\": 0.0,\n        \"max\": 21490.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          8.700972080037227,\n          2.97,\n          21490.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Xylene\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4029.411334239831,\n        \"min\": 0.0,\n        \"max\": 11422.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.0701278234985114,\n          0.98,\n          11422.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AQI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8672.054740530531,\n        \"min\": 13.0,\n        \"max\": 24850.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          166.4635814889336,\n          118.0,\n          24850.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.read_csv(\"city_day.csv\")\n",
        "\n",
        "# Check available columns in the dataframe\n",
        "print(df.columns)\n",
        "\n",
        "# Assuming 'AQI' is the target variable you want to analyze\n",
        "# Replace 'AQI' with the actual column name if different\n",
        "target_variable = 'AQI'\n",
        "\n",
        "# Distribution of AQI\n",
        "sns.histplot(df[target_variable], kde=True)\n",
        "plt.title(f'Distribution of {target_variable}')\n",
        "plt.xlabel(target_variable)\n",
        "plt.show()\n",
        "\n",
        "# Example: Relationship between PM2.5 and AQI\n",
        "sns.boxplot(x='PM2.5', y=target_variable, data=df)\n",
        "plt.title('PM2.5 vs AQI')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 979
        },
        "id": "LjkiEoT3m5hK",
        "outputId": "cdb9e6e5-e6b4-41fd-b707-6eb08ec4ea5a"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['City', 'Date', 'PM2.5', 'PM10', 'NO', 'NO2', 'NOx', 'NH3', 'CO', 'SO2',\n",
            "       'O3', 'Benzene', 'Toluene', 'Xylene', 'AQI', 'AQI_Bucket'],\n",
            "      dtype='object')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkQAAAHHCAYAAABeLEexAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAYFJJREFUeJzt3Xd8FGXiP/DPbE3fTSENQygiTYoCxogiSo5QRDjxFEVFvwh3HugpHnJ4ioje4YEURRS5H4gFPPROQRGRSFWJlGhAWigCQUk2QEhPts3z+2Ozk6wppGyyu9nP+/XaF9mZZ2eeYXDz8WkjCSEEiIiIiPyYytMVICIiIvI0BiIiIiLyewxERERE5PcYiIiIiMjvMRARERGR32MgIiIiIr/HQERERER+j4GIiIiI/B4DEREREfk9BiIiUsyZMweSJLXKuYYMGYIhQ4Yo73fs2AFJkvDf//63Vc7/8MMPo2PHjq1yrqYqKSnBo48+itjYWEiShCeffNLTVSJqsxiIiNqo1atXQ5Ik5RUQEID4+Hikpqbi9ddfR3FxsVvOc/78ecyZMweZmZluOZ47eXPdGuKf//wnVq9ejcceewzvv/8+HnzwwSt+xm63Iz4+HpIk4csvv6yznBAC77//PgYPHgyj0YigoCD07t0bL7/8MsrKymqUHzJkCK699tpmXQ+RN2MgImrj5s6di/fffx9vvfUWHn/8cQDAk08+id69e+PgwYMuZZ977jmUl5c36vjnz5/Hiy++2OjQsWXLFmzZsqVRn2ms+ur273//G1lZWS16/ubatm0bbrzxRrzwwgt44IEH0L9//wZ9JicnBx07dsSaNWtqLWO32zF+/Hg89NBDABwtg0uWLEG/fv3wwgsv4MYbb0ReXp5br4XI22k8XQEialkjRozAgAEDlPezZs3Ctm3bcMcdd+DOO+/E0aNHERgYCADQaDTQaFr2a6GsrAxBQUHQ6XQtep4r0Wq1Hj1/Q+Tl5aFnz56N+swHH3yA66+/HhMnTsSzzz6L0tJSBAcHu5SZP38+PvroI/z1r3/FggULlO1TpkzBPffcg7Fjx+KRRx7BF1984ZbrIPIFbCEi8kO33347nn/+eZw9exYffPCBsr22MURpaWm4+eabYTQaERISgm7duuHZZ58F4Bj3M3DgQADAI488onTPrV69GkBVN0tGRgYGDx6MoKAg5bO/HUPkZLfb8eyzzyI2NhbBwcG48847ce7cOZcyHTt2xMMPP1zjs9WPeaW61TaGqLS0FE8//TQSEhKg1+vRrVs3vPrqqxBCuJSTJAnTpk3D+vXrce2110Kv16NXr17YvHlz7X/hv5GXl4dJkyYhJiYGAQEB6Nu3L959911lv3M81enTp/HFF18odT9z5ky9xy0vL8enn36K8ePH45577kF5eTk2bNhQo8yCBQtwzTXXYN68eTWOMXr0aEycOBGbNm3C3r17G3Q9RG0BAxGRn3KOR6mv2+rw4cO44447YDabMXfuXCxcuBB33nknvvvuOwBAjx49MHfuXACO1oX3339fGZfidOnSJYwYMQL9+vXDkiVLcNttt9Vbr3/84x/44osvMHPmTDzxxBNIS0tDSkpKo7vyGlK36oQQuPPOO7F48WIMHz4cixYtQrdu3TBjxgxMnz69Rvlvv/0Wf/7znzF+/HjMnz8fFRUVGDduHC5dulRvvcrLyzFkyBC8//77mDBhAhYsWACDwYCHH34Yr732mlL3999/H1FRUejXr59S93bt2tV77M8++wwlJSUYP348YmNjMWTIkBrdZt9++y0uX76M+++/v87WQGdX2ueff17v+YjaFEFEbdI777wjAIh9+/bVWcZgMIjrrrtOef/CCy+I6l8LixcvFgDEhQsX6jzGvn37BADxzjvv1Nh36623CgBi+fLlte679dZblffbt28XAET79u1FUVGRsv2jjz4SAMRrr72mbEtMTBQTJ0684jHrq9vEiRNFYmKi8n79+vUCgHj55Zddyt19991CkiRx8uRJZRsAodPpXLYdOHBAABBLly6tca7qlixZIgCIDz74QNlmsVhEcnKyCAkJcbn2xMREMWrUqHqPV90dd9whBg0apLxfsWKF0Gg0Ii8vr8b5P/300zqPk5+fLwCIu+66S9l26623il69ejW4LkS+hi1ERH4sJCSk3tlmRqMRALBhwwbIstykc+j1ejzyyCMNLv/QQw8hNDRUeX/33XcjLi4OmzZtatL5G2rTpk1Qq9V44oknXLY//fTTEELUmLGVkpKCLl26KO/79OmDsLAw/Pzzz1c8T2xsLO677z5lm1arxRNPPIGSkhLs3LmzSfW/dOkSvvrqK5fjjhs3DpIk4aOPPlK2Oe939b/j33Luc9dMRCJfwEBE5MdKSkrq/cV47733YtCgQXj00UcRExOD8ePH46OPPmpUOGrfvn2jBlB37drV5b0kSbj66quvOH6muc6ePYv4+Pgafx89evRQ9lfXoUOHGscIDw/H5cuXr3ierl27QqVy/fqt6zwNtW7dOlitVlx33XU4efIkTp48ifz8fCQlJbl0mzUk7Dj3RUdHN6kuRL6Is8yI/NQvv/yCwsJCXH311XWWCQwMxK5du7B9+3Z88cUX2Lx5M9atW4fbb78dW7ZsgVqtvuJ5nDPY3KmuxSPtdnuD6uQOdZ1H/GYAdmtxhp5BgwbVuv/nn39G586dlVlrBw8exNixY2st61yOoXPnzu6vKJGXYgsRkZ96//33AQCpqan1llOpVBg6dCgWLVqEI0eO4B//+Ae2bduG7du3A6g7nDTViRMnXN4LIXDy5EmXGWHh4eEoKCio8dnftq40pm6JiYk4f/58jZaTY8eOKfvdITExESdOnKjRytac85w+fRq7d+/GtGnT8PHHH7u81q1bB51Oh7Vr1wJwBCaj0Yi1a9fCbrfXerz33nsPAPCHP/yh0XUh8lUMRER+aNu2bXjppZfQqVMnTJgwoc5y+fn5Nbb169cPAGA2mwFAWeOmtoDSFO+9955LKPnvf/+LnJwcjBgxQtnWpUsXfP/997BYLMq2jRs31pie35i6jRw5Ena7HW+88YbL9sWLF0OSJJfzN8fIkSORm5uLdevWKdtsNhuWLl2KkJAQ3HrrrY0+prN16JlnnsHdd9/t8rrnnntw6623KmWCgoLwzDPPICsrC3//+99rHOuLL77A6tWrMXr0aPTu3buJV0nke9hlRtTGffnllzh27BhsNhtMJhO2bduGtLQ0JCYm4rPPPkNAQECdn507dy527dqFUaNGITExEXl5eXjzzTdx1VVX4eabbwbgCCdGoxHLly9HaGgogoODkZSUhE6dOjWpvhEREbj55pvxyCOPwGQyYcmSJbj66qsxefJkpcyjjz6K//73vxg+fDjuuecenDp1Ch988IHLIOfG1m306NG47bbb8Pe//x1nzpxB3759sWXLFmzYsAFPPvlkjWM31ZQpU/D222/j4YcfRkZGBjp27Ij//ve/+O6777BkyZJ6x3TVZc2aNejXrx8SEhJq3X/nnXfi8ccfxw8//IDrr78ezzzzDDIzM/Gvf/0L6enpGDduHAIDA/Htt9/igw8+QK9evZT1moj8hodnuRFRC3FOu3e+dDqdiI2NFb/73e/Ea6+95jK92+m30+63bt0qxowZI+Lj44VOpxPx8fHivvvuE8ePH3f53IYNG0TPnj2FRqNxmeZe31Ttuqbdf/jhh2LWrFkiOjpaBAYGilGjRomzZ8/W+PzChQtF+/bthV6vF4MGDRL79++vccz66vbbafdCCFFcXCyeeuopER8fL7RarejatatYsGCBkGXZpRwAMXXq1Bp1qms5gN8ymUzikUceEVFRUUKn04nevXvXujRAQ6bdZ2RkCADi+eefr7PMmTNnBADx1FNPKdtkWRarV68WgwYNEqGhocq/k5SUFGE2m2scg9Puqa2ThPDQCEAiIvIaVqsVo0ePxtatW/H5559j+PDhnq4SUatiICIiIgCOR5cMGTIEx44dw86dO3H99dd7ukpErYaBiIiIiPweZ5kRERGR32MgIiIiIr/HQERERER+j4GIiIiI/B4XZmwgWZZx/vx5hIaGuv1RBURERNQyhBAoLi5GfHx8jYcqV8dA1EDnz5+vcxVYIiIi8m7nzp3DVVddVed+BqIGci6nf+7cOYSFhXm4NkRERNQQRUVFSEhIuOJjcRiIGsjZTRYWFsZARERE5GOuNNyFg6qJiIjI7zEQERERkd9jICIiIiK/x0BEREREfo+BiIiIiPweAxERERH5PQYiIiIi8nsMREREROT3GIiIiIjI7zEQERERkd9jICIiIiK/x0BEREREfo+BiIiIiPyeRwPRrl27MHr0aMTHx0OSJKxfv75GmaNHj+LOO++EwWBAcHAwBg4ciOzsbGV/RUUFpk6disjISISEhGDcuHEwmUwux8jOzsaoUaMQFBSE6OhozJgxAzabraUvj4iIiHyERwNRaWkp+vbti2XLltW6/9SpU7j55pvRvXt37NixAwcPHsTzzz+PgIAApcxTTz2Fzz//HB9//DF27tyJ8+fP46677lL22+12jBo1ChaLBbt378a7776L1atXY/bs2S1+fS1JlmXk5ORAlmXlZ+d7IiIiahxJCCE8XQkAkCQJn376KcaOHatsGz9+PLRaLd5///1aP1NYWIh27dph7dq1uPvuuwEAx44dQ48ePZCeno4bb7wRX375Je644w6cP38eMTExAIDly5dj5syZuHDhAnQ6XYPqV1RUBIPBgMLCQoSFhTXvYt0gJycHc1Zv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EI6ZjB06dBAzZ8502e6L9624uFj8+OOP4scffxQAxKJFi8SPP/6ozLR65ZVXhNFoFBs2bBAHDx4UY8aMqXXa/XXXXSf27Nkjvv32W9G1a1eX6dsFBQUiJiZGPPjgg+LQoUPiP//5jwgKCmrx6c31XZvFYhF33nmnuOqqq0RmZqbLf4fOWTq7d+8WixcvFpmZmeLUqVPigw8+EO3atRMPPfSQV19bcXGx+Otf/yrS09PF6dOnxddffy2uv/560bVrV1FRUaEcw1vv25Wuz6mwsFAEBQWJt956q8bnvfneXen7Xwj3fEc6p93PmDFDHD16VCxbtozT7v3B0qVLRYcOHYROpxM33HCD+P777z1dpXoBqPX1zjvvCCGEyM7OFoMHDxYRERFCr9eLq6++WsyYMcNlPRshhDhz5owYMWKECAwMFFFRUeLpp58WVqvVA1fk6t577xVxcXFCp9OJ9u3bi3vvvVecPHlS2V9eXi7+/Oc/i/DwcBEUFCR+//vfi5ycHJdjeOu1CSHEV199JQCIrKwsl+2+eN+2b99e67/FiRMnCiEcU++ff/55ERMTI/R6vRg6dGiN67506ZK47777REhIiAgLCxOPPPKIKC4udilz4MABcfPNNwu9Xi/at28vXnnlFY9e2+nTp+v879C5plRGRoZISkoSBoNBBAQEiB49eoh//vOfLqHCG6+trKxMDBs2TLRr105otVqRmJgoJk+eXON/Er31vl3p+pzefvttERgYKAoKCmp83pvv3ZW+/4Vw33fk9u3bRb9+/YROpxOdO3d2OUdrkIQQooUan4iIiIh8AscQERERkd9jICIiIiK/x0BEREREfo+BiIiIiPweAxERERH5PQYiIiIi8nsMREREROT3GIiIiIjI7zEQERERkd9jICKiNi89PR1qtbrWh9uWl5fjhRdewDXXXAO9Xo+oqCj84Q9/wOHDh13KzZkzB/369WulGhNRa2MgIqI2b+XKlXj88cexa9cunD9/XtluNpuRkpKCVatW4eWXX8bx48exadMm2Gw2JCUl4fvvv/dgrYmoNWk8XQEiopZUUlKCdevWYf/+/cjNzcXq1avx7LPPAgCWLFmC9PR0/Pjjj+jbty8AIDExEf/73/+QlJSESZMm4dChQ5AkyZOXQEStgC1ERNSmffTRR+jevTu6deuGBx54AKtWrYLzmdZr167F7373OyUMOalUKjz11FM4cuQIDhw44IlqE1ErYyAiojZt5cqVeOCBBwAAw4cPR2FhIXbu3AkAOH78OHr06FHr55zbjx8/3joVJSKPYiAiojYrKysLe/fuxX333QcA0Gg0uPfee7Fy5UqljLO1qC46na5F60hE3oFjiIiozVq5ciVsNhvi4+OVbUII6PV6vPHGG+jatSuOHj1a62ed26+55ppWqSsReRZbiIioTbLZbHjvvfewcOFCZGZmKq8DBw4gPj4eH374Ie677z58/fXXNcYJybKMxYsXY8CAAejZs6eHroCIWhNbiIioTdq4cSMuX76MSZMmwWAwuOwbN24cVq5ciW+++QYbNmzA6NGjsXDhQiQlJcFkMuGf//wnTpw4gd27d3uo9kTU2thCRERt0sqVK5GSklIjDAGOQLR//34cP34cW7duxUMPPYRZs2ahS5cuuOGGG3Do0CEcOnSIrUNEfkQSVxpRSETkR7788kv8/ve/x6uvvopp06Z5ujpE1ErYQkREVM2IESPw5ZdfIj8/HxcvXvR0dYiolbCFiIiIiPweW4iIiIjI7zEQERERkd9jICIiIiK/x0BEREREfo+BiIiIiPweAxERERH5PQYiIiIi8nsMREREROT3GIiIiIjI7/1/XOrcFwxrIUkAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop(columns=['Date'])  # 'City' is useful for encoding later\n",
        "df = df.dropna(subset=['AQI'])  # Drop rows where AQI (target) is missing\n",
        "\n",
        "# Fill remaining missing values with column medians\n",
        "df = df.fillna(df.median(numeric_only=True))\n",
        "\n",
        "# Encode 'City' using one-hot encoding (optional if city-based analysis is needed)\n",
        "df = pd.get_dummies(df, columns=['City'], drop_first=True)\n",
        "\n",
        "# Feature: Total Nitrogen Oxides = NO + NO2 + NOx\n",
        "df['Total_NOx'] = df[['NO', 'NO2', 'NOx']].sum(axis=1)\n",
        "\n",
        "# Feature: Total VOCs (Volatile Organic Compounds) = Benzene + Toluene + Xylene\n",
        "if {'Benzene', 'Toluene', 'Xylene'}.issubset(df.columns):\n",
        "    df['Total_VOCs'] = df[['Benzene', 'Toluene', 'Xylene']].sum(axis=1)\n",
        "\n",
        "# Feature: PM Ratio (PM2.5 / PM10) — indicates particulate pollution composition\n",
        "if 'PM2.5' in df.columns and 'PM10' in df.columns:\n",
        "    df['PM_Ratio'] = df['PM2.5'] / (df['PM10'] + 1e-6)  # Avoid division by zero\n",
        "\n",
        "# Feature: Interaction Term (PM2.5 * NO2) — potential compounding pollution effect\n",
        "if 'PM2.5' in df.columns and 'NO2' in df.columns:\n",
        "    df['PM2.5_NO2'] = df['PM2.5'] * df['NO2']\n",
        "\n",
        "# Drop original columns if they’re highly correlated with engineered features (optional)\n",
        "# For example:\n",
        "# df.drop(columns=['NO', 'NO2', 'NOx', 'Benzene', 'Toluene', 'Xylene'], inplace=True)\n",
        "\n",
        "# Print final set of features\n",
        "print(\"Final features:\", df.columns.tolist())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JItKSX_QoGyx",
        "outputId": "2d67453c-4c18-41ef-f7d9-95c67f6ea2f7"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Final features: ['PM2.5', 'PM10', 'NO', 'NO2', 'NOx', 'NH3', 'CO', 'SO2', 'O3', 'Benzene', 'Toluene', 'Xylene', 'AQI', 'AQI_Bucket', 'City_Aizawl', 'City_Amaravati', 'City_Amritsar', 'City_Bengaluru', 'City_Bhopal', 'City_Brajrajnagar', 'City_Chandigarh', 'City_Chennai', 'City_Coimbatore', 'City_Delhi', 'City_Ernakulam', 'City_Gurugram', 'City_Guwahati', 'City_Hyderabad', 'City_Jaipur', 'City_Jorapokhar', 'City_Kochi', 'City_Kolkata', 'City_Lucknow', 'City_Mumbai', 'City_Patna', 'City_Shillong', 'City_Talcher', 'City_Thiruvananthapuram', 'City_Visakhapatnam', 'Total_NOx', 'Total_VOCs', 'PM_Ratio', 'PM2.5_NO2']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Prepare Data (Assuming 'X_scaled' and 'y' are ready from preprocessing)\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "# Step 2: Split Data\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Step 3: Build and Train Model\n",
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Step 4: Predict on Test Data\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Step 5: Evaluate Model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "# Step 6: Output Results\n",
        "print(\"✅ Model Training Complete!\")\n",
        "print(f\"📉 Mean Squared Error (MSE): {mse:.2f}\")\n",
        "print(f\"📈 R² Score: {r2:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sFQUwuG0r3UI",
        "outputId": "3a217709-4945-4aee-c1ee-ca63b52a6fb8"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Model Training Complete!\n",
            "📉 Mean Squared Error (MSE): 3533.31\n",
            "📈 R² Score: 0.8070\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Predict on test set\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Evaluation Metrics\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(\"📊 Model Evaluation Results:\")\n",
        "print(f\"Mean Squared Error (MSE): {mse:.2f}\")\n",
        "print(f\"Mean Absolute Error (MAE): {mae:.2f}\")\n",
        "print(f\"R² Score: {r2:.4f}\")\n",
        "\n",
        "# Residual Plot\n",
        "residuals = y_test - y_pred\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.histplot(residuals, kde=True)\n",
        "plt.title('Residual Distribution')\n",
        "plt.xlabel('Prediction Error')\n",
        "plt.ylabel('Frequency')\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "# Actual vs Predicted Plot\n",
        "plt.figure(figsize=(8, 5))\n",
        "sns.scatterplot(x=y_test, y=y_pred)\n",
        "plt.xlabel(\"Actual AQI\")\n",
        "plt.ylabel(\"Predicted AQI\")\n",
        "plt.title(\"Actual vs Predicted AQI\")\n",
        "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')  # diagonal line\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "yuUJ_wLislx_",
        "outputId": "3a6ea529-c983-4963-abdc-5824fbf8b06b"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📊 Model Evaluation Results:\n",
            "Mean Squared Error (MSE): 3533.31\n",
            "Mean Absolute Error (MAE): 31.17\n",
            "R² Score: 0.8070\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import gradio as gr\n",
        "\n",
        "def predict_aqi(*inputs):\n",
        "    scaled_input = scaler.transform([inputs])\n",
        "    prediction = model.predict(scaled_input)\n",
        "    return round(prediction[0], 2)\n",
        "\n",
        "# Assuming 'features' from your previous cell contains the relevant features\n",
        "selected_features = features  # Assign the features used in the model to selected_features\n",
        "\n",
        "gr.Interface(\n",
        "    fn=predict_aqi,\n",
        "    inputs=[gr.Number(label=feature) for feature in selected_features],\n",
        "    outputs=gr.Number(label=\"Predicted AQI\"),\n",
        "    title=\"🌫️ AQI Predictor\",\n",
        "    description=\"Input pollutant values to predict air quality index\"\n",
        ").launch()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 646
        },
        "id": "2tzju-osuNtP",
        "outputId": "94d95d2f-6540-4601-ffea-4a88526728fa"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "It looks like you are running Gradio on a hosted a Jupyter notebook. For the Gradio app to work, sharing must be enabled. Automatically setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n",
            "\n",
            "Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n",
            "* Running on public URL: https://5d091deec62fcdee8b.gradio.live\n",
            "\n",
            "This share link expires in 1 week. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<div><iframe src=\"https://5d091deec62fcdee8b.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": []
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    }
  ]
}